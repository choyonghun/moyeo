<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.moyeo.dao.ReviewBoardDao">

  <resultMap id="ReviewBoardMap" type="ReviewBoard">
    <id column="review_board_id" property="reviewBoardId"/>
    <result column="title" property="title"/>
    <result column="content" property="content"/>
    <result column="created_date" property="createdDate"/>
    <result column="views" property="views"/>
    <result column="c" property="likeCount"/>
    <result column="theme_name" property="themeName"/>
    <result column="region_name" property="regionName"/>

    <association property="writer" javaType="Member">
      <id column="member_id" property="memberId"/>
      <result column="nickname" property="nickname"/>
    </association>

    <collection property="photos" ofType="ReviewPhoto">
      <id column="review_photo_id" property="reviewPhotoId"/>
      <result column="review_board_id" property="reviewBoardId"/>
      <result column="photo" property="photo"/>
    </collection>

  </resultMap>

  <insert id="add" parameterType="ReviewBoard"
    useGeneratedKeys="true" keyColumn="review_board_id" keyProperty="reviewBoardId">
    insert into review_board(theme_id, member_id, region_id, title, content, latitude, longitude) values('1', '1', '1', #{title}, #{content}, '11.111', '111.111');
  </insert>

  <select id="findAll" resultMap="ReviewBoardMap">
    select
      rb.review_board_id,
      rb.title,
      rb.created_date,
      rb.views,
      c,
      m.member_id,
      m.nickname,
      t.theme_name,
      r.region_name,
      rp.review_photo_id,
      rp.photo
    from
      review_board rb inner join member m on m.member_id = rb.member_id
      inner join theme t on rb.theme_id = t.theme_id
      inner join region r on r.region_id=rb.region_id
      left outer join review_photo rp on rp.review_board_id = rb.review_board_id
      left outer join (select review_board_id, count(member_id) c from review_like group by review_board_id) as rl on rl.review_board_id=rb.review_board_id
    group by
      rb.review_board_id
    order by
      rb.review_board_id desc
    limit #{rowCount} offset #{offset}
  </select>
  <select id="findAllByRegionId" parameterType="int" resultMap="ReviewBoardMap">
    select
    rb.review_board_id,
    rb.title,
    rb.created_date,
    rb.views,
    c,
    m.member_id,
    m.nickname,
    t.theme_name,
    r.region_name,
    rp.review_photo_id,
    rp.photo
    from
    review_board rb inner join member m on m.member_id = rb.member_id
    inner join theme t on rb.theme_id = t.theme_id
    inner join region r on r.region_id=rb.region_id
    left outer join review_photo rp on rp.review_board_id = rb.review_board_id
    left outer join (select review_board_id, count(member_id) c from review_like group by review_board_id) as rl on rl.review_board_id=rb.review_board_id
    where
    rb.region_id=#{regionId}
    group by
    rb.review_board_id
    order by
    rb.review_board_id desc
    limit #{rowCount} offset #{offset}
  </select>

  <select id="findBy" resultMap="ReviewBoardMap" parameterType="int">
    select
      rb.review_board_id,
      rb.title,
      rb.created_date,
      rb.content,
      rb.latitude,
      rb.longitude,
      t.theme_name,
      r.region_name,
      m.member_id,
      m.nickname,
      m.photo,
      rp.review_photo_id,
      rp.photo
    from
      review_board rb inner join region r on rb.region_id=r.region_id
      inner join theme t on rb.theme_id=t.theme_id
      left outer join member m on m.member_id=rb.member_id
      left outer join review_photo rp on rp.review_board_id=rb.review_board_id
    where
      rb.review_board_id=#{reviewBoardId}
  </select>

  <select id="countAll" resultType="int">
    select count(*) as c from review_board
  </select>
  <select id="countAllByRegionId" resultType="int" parameterType="int">
    select count(*) as c from review_board where region_id=#{regionId}
  </select>

  <delete id="delete" parameterType="int">
    delete from review_board
    where review_board_id=#{value}
  </delete>

  <update id="update" parameterType="ReviewBoard">
    update review_board set
      title=#{title},
      content=#{content}
<!--    rb.latitude,-->
<!--    rb.longitude,-->
<!--    t.theme_name,-->
<!--    r.region_name,-->
<!--    rp.review_photo_id,-->
<!--    rp.photo-->
    where
      review_board_id=#{reviewBoardId}
  </update>

  <update id="increaseViews">
    update review_board set
      views = views+1
    where
      review_board_id=#{reviewBoardId}
  </update>

</mapper>